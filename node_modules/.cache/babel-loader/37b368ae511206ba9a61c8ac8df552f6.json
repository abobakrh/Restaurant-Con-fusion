{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(dishesFailed));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["D:/projects/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","fetchDishes","dispatch","dishesLoading","fetch","then","response","ok","error","Error","status","statusText","errmess","message","json","dishes","addDishes","catch","dishesFailed","fetchLeaders","leadersLoading","leaders","addLeaders","type","DISHES_LOADING","LEADERS_LOADING","DISHES_FAILED","payload","leadersFailed","LEADERS_FAILED","ADD_DISHES","ADD_LEADERS","addComment","comment","ADD_COMMENT","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","postComment","dishId","rating","author","newComment","date","Date","toISOString","method","body","JSON","stringify","headers","credentials","console","log","alert"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nexport const fetchDishes = () => (dispatch) => {\r\n\r\n    dispatch(dishesLoading(true));\r\n\r\n    return fetch(baseUrl + 'dishes')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(dishes => dispatch(addDishes(dishes)))\r\n    .catch(error => dispatch(dishesFailed(error.message)));\r\n}\r\nexport const fetchLeaders = () => (dispatch) => {\r\n  dispatch(leadersLoading(true));\r\n\r\n  return fetch(baseUrl + 'leaders')\r\n  .then(response =>{\r\n      if (response.ok) {\r\n        return response;\r\n      }else{\r\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n      }\r\n  },\r\n  error =>{\r\n    var errmess = new Error(error.message);\r\n    throw errmess;\r\n  }\r\n  )\r\n  .then(response => response.json())\r\n  .then(leaders => dispatch(addLeaders(leaders)))\r\n  .catch(error => dispatch(dishesFailed))\r\n}\r\nexport const dishesLoading = () => ({\r\n    type: ActionTypes.DISHES_LOADING\r\n});\r\n\r\nexport const leadersLoading = () => ({\r\n    type: ActionTypes.LEADERS_LOADING\r\n});\r\n\r\nexport const dishesFailed = (errmess) => ({\r\n    type: ActionTypes.DISHES_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const leadersFailed = (errmess) => ({\r\n  type: ActionTypes.LEADERS_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addDishes = (dishes) => ({\r\n    type: ActionTypes.ADD_DISHES,\r\n    payload: dishes\r\n});\r\n\r\nexport const addLeaders = (leaders) => ({\r\n  type: ActionTypes.ADD_LEADERS,\r\n  payload: leaders\r\n});\r\n\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n});\r\n\r\nexport const fetchComments = () => (dispatch) => {    \r\n    return fetch(baseUrl + 'comments')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(comments => dispatch(addComments(comments)))\r\n    .catch(error => dispatch(commentsFailed(error.message)));\r\n};\r\n\r\nexport const commentsFailed = (errmess) => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addComments = (comments) => ({\r\n    type: ActionTypes.ADD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const fetchPromos = () => (dispatch) => {\r\n    \r\n    dispatch(promosLoading());\r\n\r\n    return fetch(baseUrl + 'promotions')\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            var errmess = new Error(error.message);\r\n            throw errmess;\r\n      })\r\n    .then(response => response.json())\r\n    .then(promos => dispatch(addPromos(promos)))\r\n    .catch(error => dispatch(promosFailed(error.message)));\r\n}\r\n\r\nexport const promosLoading = () => ({\r\n    type: ActionTypes.PROMOS_LOADING\r\n});\r\n\r\nexport const promosFailed = (errmess) => ({\r\n    type: ActionTypes.PROMOS_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const addPromos = (promos) => ({\r\n    type: ActionTypes.ADD_PROMOS,\r\n    payload: promos\r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    const newComment = {\r\n        dishId: dishId,\r\n        rating: rating,\r\n        author: author,\r\n        comment: comment\r\n    };\r\n    newComment.date = new Date().toISOString();\r\n    \r\n    return fetch(baseUrl + 'comments', {\r\n        method: \"POST\",\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addComment(response)))\r\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\r\n};"]},"metadata":{},"sourceType":"module"}